#! /bin/bash
export CHROMADB_HOST=localhost
export CHROMADB_PORT=8800
export CHROMADB_USER="user1"
chromadb_password="password123"
export REDIS_USER="user2"
redis_password="redisCache123#"
export CHROMADB_CREDS="${CHROMADB_USER}:${chromadb_password}"
export REDIS_CREDS="${REDIS_USER}:${redis_password}"
export TOKENIZERS_PARALLELISM=true

flag=$1

logo(){
    echo "+----------------------------------------+
|                                        |
|             .......                    |
|            .~~~~~~~~..                 |
|           .~.~~~~~.......              |
|           .~~~~... ..   .              |
|           .~~~...~:~~~.                |
|           .~. .~+:+:~~.                |
|              ..:::+~~.                 |
|           ~:::~::~:~~~~~~~..           |
|         .=o=+==+~:+++++=====+:.        |
|        .o==++=+~~=====+===+=+=+.       |
|       ~o===+++~.+====++==++++++++~     |
|      ~o===+:~~.:o===++::+~::=++++=:    |
|      =o==+~~~~+===+:+++~::..::+==+:    |
|     .=oo=+:::::::~~~::+.~~  .+==++~    |
|      :====+:=o+.......  . .~==++:.     |
|      :o===++o=+~ ..... .~:+=+:~+.      |
|     .=oo::=+=o+~ .... .:+++:.          |
|     +ooo==+++++~ .... ..::~            |
|    :oo==oo++:::~  ....                 |
|    =oo==o=++::++  ......               |
|    .=ooooo=+:+:=. ... ...              |
|      .~::+++++++  .... ...             |
|        ~........ .....  .              |
|        ........ ......                 |
|        ...... .  ...  . .              |
|         ~... .. ..........             |
|         ~.....  ..........             |
|         ........  ..... .              |
|           ..... . .~.....              |
|            .~...~   .....              |
|             ~~...    ....              |
|             ~~~..    .~...             |
|            .~:~~.    .:..~             |
|          .~:~~~..    .::~~.            |
|        .~:::~...     .::~:~.           |
|       .::~~~..       .::::~~.          |
|                       ....             |
+----------------------------------------+"
}


case $flag in
    up)
        echo "Starting ChromaDB and Redis"
        export CHROMADB_ENCRYPTED_CREDS=`docker run --rm --entrypoint htpasswd httpd:2 -Bbn $CHROMADB_USER $chromadb_password`
        echo "
user default off
user ${REDIS_USER} on >${redis_password} allcommands allkeys" > ./docker/redis-users.acl
        echo $CHROMADB_CREDS
        echo $REDIS_CREDS
        echo $CHROMADB_ENCRYPTED_CREDS
        echo "
# CHROMA DB SETTINGS
CHROMA_SERVER_AUTHN_CREDENTIALS='${CHROMADB_ENCRYPTED_CREDS}'
        ">./docker/.chroma_env
        pushd docker &>/dev/null
        docker compose up -d --remove-orphans
        popd &>/dev/null
        ;;
    down)
        echo "Stopping ChromaDB and Redis"
        pushd docker &>/dev/null
        docker compose down
        popd &>/dev/null
        ;;
    chroma-stats)
        echo "Chroma Stats"
        echo "-------------"
        echo "CTRL-C To Exit"
        echo
        for i in {1..3}; do
            echo -n "."
            sleep 1
        done
        pushd docker &>/dev/null
        docker compose stats
        popd &>/dev/null
        ;;
    get-news)
        python -m newsies.main get-articles
        ;;
    analyze)

        export NLTK_DATA="~/nltk_data"
        export PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
        python -m newsies.main analyze
        ;;
    cli)
        python -m newsies.main cli
        ;;
    serve)
        # this should run even after SIGINT or SIGTERM are trapped
        nohup uvicorn newsies.api.app:app > newsies.log 2>newsies_err.log 1>newsies.log &
        serve_pid=$!
        echo $serve_pid>.newsies.pid
        disown $serve_pid

        # tail the logs until SIGINT or SIGTERM are trapped
        tail -f ./newsies*.log &
        tail_pid=$!
        disown $tail_pid
        echo "Tailing newsies logs -- ANY KEY to stop log tailing (server will continue)"

        # only kill the tail process - leave the uvicorn process running
        kill_tail(){
            echo "stop tailing newsies log files (${tail_pid})"
            kill $tail_pid
        }

        # block until the user hits a key
        read -s -n 1
        kill_tail
        ;;
    kill)
        PID=`cat .newsies.pid`
        echo "terminating newsies server ($PID)"
        kill $PID
        ;;
    api)
        xdg-open http://localhost:8000/docs
        ;;
    chroma-logs)
        echo "Chroma Logs"
        echo "-------------"
        echo "CTRL-C To Exit"
        echo
        for i in {1..3}; do
            echo -n "."
            sleep 1
        done
        pushd docker &>/dev/null
        docker compose logs -f
        popd &>/dev/null
        ;;

    *)
        logo
        echo
        echo Newsies Usage
        echo
        echo "Usage: newsies [routine]"
	echo
        echo "CLI Commands"
        echo -e "\tget-news\tdownload latest news from apnews.com"
        echo -e "\tanalyze\tschedule model training based on story page-ranking"
        echo -e "\ttrain\ttrain model based on story page-ranking"
        echo -e "\tcli\tinitiate interactive agent session using most recently trained model"
	echo -e "\tup\tstart backend services (ChromaDB, Redis)"
        echo -e "\tdown\tstop backend services"
        echo -e "\tchroma-stats\tshow backend service status"
        echo -e "\tchroma-logs\tshow backend service logs"
        echo "--------------"
        echo "API Server"
        echo -e "\tserve\tstart the FastAPI server"
        echo -e "\tkill\tterminate the FastAPI server"
	echo -e "\tapi\tlaunch FastAPI session (shows interactive API docs)"
        ;;
esac

